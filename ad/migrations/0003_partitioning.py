# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2016-12-29 00:25
from __future__ import unicode_literals

from django.db import migrations


SQL_create_partitions = '''
    CREATE TABLE ad_ad_sale (CHECK ( deal_type = 'sale' and status = 1 )) INHERITS (ad_ad);
    CREATE TABLE ad_ad_rent (CHECK ( deal_type = 'rent' and status = 1 )) INHERITS (ad_ad);
    CREATE TABLE ad_ad_rent_daily (CHECK ( deal_type = 'rent_daily' and status = 1 )) INHERITS (ad_ad);
    CREATE TABLE ad_ad_newhomes (CHECK ( deal_type = 'newhomes' and status = 1 )) INHERITS (ad_ad);
    CREATE TABLE ad_ad_archive (CHECK ( status != 1 )) INHERITS (ad_ad);

    --- Функция для добавления объектов
    --- Функция для смены партиции при изменении объектов
    CREATE OR REPLACE FUNCTION check_table() RETURNS TRIGGER AS $$
        DECLARE v_Table VARCHAR(30);
        BEGIN
            IF (NEW.status = 1) THEN
                v_Table = 'ad_ad' || '_' || NEW.deal_type;
            ELSE
                v_Table = 'ad_ad' || '_' || 'archive' ;
            END IF;

            IF (v_Table = TG_RELNAME) THEN
                RETURN NEW;
            ELSE
                IF (TG_OP = 'UPDATE') THEN
                    EXECUTE 'DELETE FROM ' || TG_RELNAME || ' WHERE basead_ptr_id = ' || NEW.basead_ptr_id || ';';
                ELSE
                END IF;
                EXECUTE 'INSERT INTO ' || v_Table || ' VALUES ( ($1).*)' USING NEW;
                RETURN NULL;
            END IF;
        END;
        $$
        LANGUAGE plpgsql;

    CREATE TRIGGER ad_insert_trigger BEFORE INSERT ON ad_ad FOR EACH ROW EXECUTE PROCEDURE check_table();

    CREATE TRIGGER ad_update_trigger BEFORE UPDATE ON ad_ad_sale FOR EACH ROW EXECUTE PROCEDURE check_table();
    CREATE TRIGGER ad_update_trigger BEFORE UPDATE ON ad_ad_rent FOR EACH ROW EXECUTE PROCEDURE check_table();
    CREATE TRIGGER ad_update_trigger BEFORE UPDATE ON ad_ad_rent_daily FOR EACH ROW EXECUTE PROCEDURE check_table();
    CREATE TRIGGER ad_update_trigger BEFORE UPDATE ON ad_ad_newhomes FOR EACH ROW EXECUTE PROCEDURE check_table();
    CREATE TRIGGER ad_update_trigger BEFORE UPDATE ON ad_ad_archive FOR EACH ROW EXECUTE PROCEDURE check_table();

    --- Перенос данных
    INSERT INTO ad_ad_sale (SELECT * FROM ad_ad WHERE deal_type = 'sale' and status = 1 );
    INSERT INTO ad_ad_rent (SELECT * FROM ad_ad WHERE deal_type = 'rent' and status = 1 );
    INSERT INTO ad_ad_rent_daily (SELECT * FROM ad_ad WHERE deal_type = 'rent_daily' and status = 1 );
    INSERT INTO ad_ad_newhomes (SELECT * FROM ad_ad WHERE deal_type = 'newhomes' and status = 1 );
    INSERT INTO ad_ad_archive (SELECT * FROM ad_ad WHERE status != 1 );

    -- Очистка исходной таблицы
    TRUNCATE ONLY ad_ad;

    --- Индексы
'''

for table in ['sale', 'rent', 'rent_daily', 'newhomes', 'archive']:
    SQL_create_partitions += '''
    ALTER TABLE ad_ad_{0} ADD PRIMARY KEY (basead_ptr_id);
    CREATE INDEX {0}_propertytype ON ad_ad_{0} USING btree (property_type);
    CREATE INDEX {0}_ordering ON ad_ad_{0} USING btree (vip, updated, basead_ptr_id);
    CREATE INDEX {0}_price ON ad_ad_{0} USING btree (price_uah);
    CREATE INDEX {0}_region ON ad_ad_{0} USING btree (region_id);
    CREATE INDEX {0}_user ON ad_ad_{0} USING btree (user_id);
    '''.format(table)

SQL_remove_partitions = '''
    DROP TRIGGER IF EXISTS ad_insert_trigger ON ad_ad;

    INSERT INTO ad_ad (SELECT * FROM ad_ad_sale);
    INSERT INTO ad_ad (SELECT * FROM ad_ad_rent);
    INSERT INTO ad_ad (SELECT * FROM ad_ad_rent_daily);
    INSERT INTO ad_ad (SELECT * FROM ad_ad_newhomes);
    INSERT INTO ad_ad (SELECT * FROM ad_ad_archive);

    DROP TABLE ad_ad_sale;
    DROP TABLE ad_ad_rent;
    DROP TABLE ad_ad_rent_daily;
    DROP TABLE ad_ad_newhomes;
    DROP TABLE ad_ad_archive;

    DROP FUNCTION IF EXISTS check_table();
'''

class Migration(migrations.Migration):

    dependencies = [
        ('ad', '0002_auto_20161229_0023'),
    ]

    operations = [
        migrations.RunSQL(SQL_create_partitions, reverse_sql=SQL_remove_partitions),
    ]
